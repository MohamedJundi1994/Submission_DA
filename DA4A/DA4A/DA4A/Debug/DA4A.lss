
DA4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000077e  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000698  00000000  00000000  000009de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d2  00000000  00000000  00001076  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ca  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000100  00000000  00000000  0000176a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int adc_value;     // Used to hold ADC value
int p_button = 0;       // Used to hold button value to control motor ON/OFF

int main()
{
	sei();         // Enable global interrupt
  90:	78 94       	sei

	DDRC = (1 << PC2);   // Used to set PC2 as output
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	87 b9       	out	0x07, r24	; 7
	DDRD = (1 << PD6);   // Used to set PD6 as output
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	8a b9       	out	0x0a, r24	; 10
	PORTC |= (1 << PC1);  // Used to enabled the pull up resistor
  9a:	41 9a       	sbi	0x08, 1	; 8

	TCCR0A= (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);  // Used to set mode to Fast PWM with clear OCR0A on match
  9c:	83 e8       	ldi	r24, 0x83	; 131
  9e:	84 bd       	out	0x24, r24	; 36
	TCCR0B= (1 << CS02) | (1 << CS00);  // Used to set the prescaler to 1024 for calculations
  a0:	85 e0       	ldi	r24, 0x05	; 5
  a2:	85 bd       	out	0x25, r24	; 37

	PCICR = (1 << PCIE1);  // PCIE1 is set high, to enable PCMSK1
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK1 = (1 << PCINT9);  // PIN change interrupt source 9, so PC1 will serve as external interrupt source
  aa:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>

	ADMUX = (0<<REFS1);   // Selecting voltage reference for ADC
  ae:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11100111;  // ADC enabled, ADC will start conversion, ADC auto trigger enabled, division factor set to 128
  b2:	87 ee       	ldi	r24, 0xE7	; 231
  b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x28>

000000ba <__vector_4>:
		// Infinite loop, wait
	}
}

ISR(PCINT1_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31

	if(!(PINC & ( 1 << PC1))) // If PC1 button pressed, enter if statement
  ce:	31 99       	sbic	0x06, 1	; 6
  d0:	35 c0       	rjmp	.+106    	; 0x13c <__vector_4+0x82>
	{
		if(p_button == 1)  // If p_button is high, enter if statement
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	91 05       	cpc	r25, r1
  de:	c1 f4       	brne	.+48     	; 0x110 <__vector_4+0x56>
		{
			while((ADCSRA & (1 << ADIF)) == 0);  // ADC conversion completes when high
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	84 ff       	sbrs	r24, 4
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <__vector_4+0x2a>
			adc_value = ADC;      // The value in ADC placed in variable
  ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  f2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <adc_value+0x1>
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_value>
			OCR0A = adc_value;      // Motor will run as value of ADC set to OCR0A
  fa:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	89 e6       	ldi	r24, 0x69	; 105
 100:	98 e1       	ldi	r25, 0x18	; 24
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <__vector_4+0x48>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <__vector_4+0x52>
 10c:	00 00       	nop
 10e:	0c c0       	rjmp	.+24     	; 0x128 <__vector_4+0x6e>
			_delay_ms(500);       // Used to remove denouncing
		}
		
		else if (p_button == 0) // If p_button is 0, enter if statement
 110:	89 2b       	or	r24, r25
 112:	51 f4       	brne	.+20     	; 0x128 <__vector_4+0x6e>
		{
			OCR0A = 0;   // Motor will stop now
 114:	17 bc       	out	0x27, r1	; 39
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	89 e6       	ldi	r24, 0x69	; 105
 11a:	98 e1       	ldi	r25, 0x18	; 24
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <__vector_4+0x62>
 124:	00 c0       	rjmp	.+0      	; 0x126 <__vector_4+0x6c>
 126:	00 00       	nop
			_delay_ms(500);  // Used to remove denouncing
		}
		p_button ^= 1;   // Reset the value of button to 1
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	82 27       	eor	r24, r18
 134:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
