
DA2A C code for number 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000823  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000208  00000000  00000000  00000e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001024  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB |= (1<<PB2);                 // Output is set to PB2
  80:	22 9a       	sbi	0x04, 2	; 4
	TCCR1B = (1<<CS12) | (1<<CS10);   // Setting prescaler to 1024 on counter 1 (binary = 101 => 1024)
  82:	85 e0       	ldi	r24, 0x05	; 5
  84:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	while(1)						  // Infinite loop
	{
		if((PINC & 0x02) == 0x02)     // Reading from 1st pin
		{
			TCNT1 = 0;                // Counter set to zero
  88:	e4 e8       	ldi	r30, 0x84	; 132
  8a:	f0 e0       	ldi	r31, 0x00	; 0
			while (TCNT1 < 0x2625)    // Loop as long as counter is less than TCNT calculated value
			{
				PORTB = 0xFF;         // LED ON while loop runs
  8c:	2f ef       	ldi	r18, 0xFF	; 255
	DDRB |= (1<<PB2);                 // Output is set to PB2
	TCCR1B = (1<<CS12) | (1<<CS10);   // Setting prescaler to 1024 on counter 1 (binary = 101 => 1024)
	
	while(1)						  // Infinite loop
	{
		if((PINC & 0x02) == 0x02)     // Reading from 1st pin
  8e:	31 9b       	sbis	0x06, 1	; 6
  90:	0e c0       	rjmp	.+28     	; 0xae <main+0x2e>
		{
			TCNT1 = 0;                // Counter set to zero
  92:	11 82       	std	Z+1, r1	; 0x01
  94:	10 82       	st	Z, r1
			while (TCNT1 < 0x2625)    // Loop as long as counter is less than TCNT calculated value
  96:	80 81       	ld	r24, Z
  98:	91 81       	ldd	r25, Z+1	; 0x01
  9a:	85 32       	cpi	r24, 0x25	; 37
  9c:	96 42       	sbci	r25, 0x26	; 38
  9e:	b8 f7       	brcc	.-18     	; 0x8e <main+0xe>
			{
				PORTB = 0xFF;         // LED ON while loop runs
  a0:	25 b9       	out	0x05, r18	; 5
	while(1)						  // Infinite loop
	{
		if((PINC & 0x02) == 0x02)     // Reading from 1st pin
		{
			TCNT1 = 0;                // Counter set to zero
			while (TCNT1 < 0x2625)    // Loop as long as counter is less than TCNT calculated value
  a2:	80 81       	ld	r24, Z
  a4:	91 81       	ldd	r25, Z+1	; 0x01
  a6:	85 32       	cpi	r24, 0x25	; 37
  a8:	96 42       	sbci	r25, 0x26	; 38
  aa:	d0 f3       	brcs	.-12     	; 0xa0 <main+0x20>
  ac:	f0 cf       	rjmp	.-32     	; 0x8e <main+0xe>
				PORTB = 0xFF;         // LED ON while loop runs
			}
		}
		else
		{
			PORTB = 0x00;			  // LED OFF if nothing read from 1st pin
  ae:	15 b8       	out	0x05, r1	; 5
  b0:	ee cf       	rjmp	.-36     	; 0x8e <main+0xe>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
