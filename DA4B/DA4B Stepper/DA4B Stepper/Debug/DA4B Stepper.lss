
DA4B Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000282  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000991  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000682  00000000  00000000  00000ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000394  00000000  00000000  00001327  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000016bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c6  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000360  00000000  00000000  00001aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int adc_value;					// variable used to hold ADC value

int main(void)
{
	DDRB = 0xFF;						// Used to set all pins as output
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;							// Used to make initial value 0
  94:	15 b8       	out	0x05, r1	; 5
	
	ADMUX = (0 << REFS1) | (1 << REFS0);	// AREF, internal Vref turned off
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11100111;				    // ADC enabled, ADC will start conversion, ADC auto trigger enabled, division factor set to 128
  9c:	87 ee       	ldi	r24, 0xE7	; 231
  9e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	TCCR1A = (1 << COM1A1);              // Used to clear OC1A on compare match
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10); // Used for setting mode to CTC and setting a prescaler of 1024
  a8:	8d e0       	ldi	r24, 0x0D	; 13
  aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	adc_value = ADC;
  ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	OCR1A = adc_value;						// OCR1A holds adc value
  be:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  c2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	while(1)
	{										// Following code used to rotate stepper motor counter clockwisse with full step sequence
		if ((OCR1A >= 0) && (OCR1A < 100))
  c6:	e8 e8       	ldi	r30, 0x88	; 136
  c8:	f0 e0       	ldi	r31, 0x00	; 0
		{
			PORTB = 0x09;
  ca:	59 e0       	ldi	r21, 0x09	; 9
			_delay_ms(5);
			PORTB = 0x03;
  cc:	43 e0       	ldi	r20, 0x03	; 3
			_delay_ms(5);
			PORTB = 0x06;
  ce:	36 e0       	ldi	r19, 0x06	; 6
			_delay_ms(5);
			PORTB = 0x0c;
  d0:	2c e0       	ldi	r18, 0x0C	; 12
	adc_value = ADC;
	OCR1A = adc_value;						// OCR1A holds adc value
	
	while(1)
	{										// Following code used to rotate stepper motor counter clockwisse with full step sequence
		if ((OCR1A >= 0) && (OCR1A < 100))
  d2:	80 81       	ld	r24, Z
  d4:	91 81       	ldd	r25, Z+1	; 0x01
  d6:	80 81       	ld	r24, Z
  d8:	91 81       	ldd	r25, Z+1	; 0x01
  da:	84 36       	cpi	r24, 0x64	; 100
  dc:	91 05       	cpc	r25, r1
  de:	10 f5       	brcc	.+68     	; 0x124 <main+0x94>
		{
			PORTB = 0x09;
  e0:	55 b9       	out	0x05, r21	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e1       	ldi	r24, 0x1F	; 31
  e4:	9e e4       	ldi	r25, 0x4E	; 78
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x56>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x5c>
  ec:	00 00       	nop
			_delay_ms(5);
			PORTB = 0x03;
  ee:	45 b9       	out	0x05, r20	; 5
  f0:	8f e1       	ldi	r24, 0x1F	; 31
  f2:	9e e4       	ldi	r25, 0x4E	; 78
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x64>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x6a>
  fa:	00 00       	nop
			_delay_ms(5);
			PORTB = 0x06;
  fc:	35 b9       	out	0x05, r19	; 5
  fe:	8f e1       	ldi	r24, 0x1F	; 31
 100:	9e e4       	ldi	r25, 0x4E	; 78
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x72>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x78>
 108:	00 00       	nop
			_delay_ms(5);
			PORTB = 0x0c;
 10a:	25 b9       	out	0x05, r18	; 5
 10c:	8f e1       	ldi	r24, 0x1F	; 31
 10e:	9e e4       	ldi	r25, 0x4E	; 78
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x80>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x86>
 116:	00 00       	nop
			_delay_ms(5);
			
			OCR1A = adc_value;
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 120:	91 83       	std	Z+1, r25	; 0x01
 122:	80 83       	st	Z, r24
		}

		if ((OCR1A >= 100) && (OCR1A < 200))
 124:	80 81       	ld	r24, Z
 126:	91 81       	ldd	r25, Z+1	; 0x01
 128:	84 36       	cpi	r24, 0x64	; 100
 12a:	91 05       	cpc	r25, r1
 12c:	98 f1       	brcs	.+102    	; 0x194 <main+0x104>
 12e:	80 81       	ld	r24, Z
 130:	91 81       	ldd	r25, Z+1	; 0x01
 132:	88 3c       	cpi	r24, 0xC8	; 200
 134:	91 05       	cpc	r25, r1
 136:	70 f5       	brcc	.+92     	; 0x194 <main+0x104>
		{
			PORTB = 0x09;
 138:	55 b9       	out	0x05, r21	; 5
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	60 e7       	ldi	r22, 0x70	; 112
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	91 50       	subi	r25, 0x01	; 1
 142:	60 40       	sbci	r22, 0x00	; 0
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0xb0>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0xba>
 14a:	00 00       	nop
			_delay_ms(50);
			PORTB = 0x03;
 14c:	45 b9       	out	0x05, r20	; 5
 14e:	9f ef       	ldi	r25, 0xFF	; 255
 150:	60 e7       	ldi	r22, 0x70	; 112
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	91 50       	subi	r25, 0x01	; 1
 156:	60 40       	sbci	r22, 0x00	; 0
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0xc4>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0xce>
 15e:	00 00       	nop
			_delay_ms(50);
			PORTB = 0x06;
 160:	35 b9       	out	0x05, r19	; 5
 162:	9f ef       	ldi	r25, 0xFF	; 255
 164:	60 e7       	ldi	r22, 0x70	; 112
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	91 50       	subi	r25, 0x01	; 1
 16a:	60 40       	sbci	r22, 0x00	; 0
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0xd8>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0xe2>
 172:	00 00       	nop
			_delay_ms(50);
			PORTB = 0x0c;
 174:	25 b9       	out	0x05, r18	; 5
 176:	9f ef       	ldi	r25, 0xFF	; 255
 178:	60 e7       	ldi	r22, 0x70	; 112
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	91 50       	subi	r25, 0x01	; 1
 17e:	60 40       	sbci	r22, 0x00	; 0
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0xec>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0xf6>
 186:	00 00       	nop
			_delay_ms(50);
			
			OCR1A = adc_value;
 188:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 18c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 190:	91 83       	std	Z+1, r25	; 0x01
 192:	80 83       	st	Z, r24
		}

		if ((OCR1A >= 200) && (OCR1A < 300))
 194:	80 81       	ld	r24, Z
 196:	91 81       	ldd	r25, Z+1	; 0x01
 198:	88 3c       	cpi	r24, 0xC8	; 200
 19a:	91 05       	cpc	r25, r1
 19c:	08 f4       	brcc	.+2      	; 0x1a0 <main+0x110>
 19e:	99 cf       	rjmp	.-206    	; 0xd2 <main+0x42>
 1a0:	80 81       	ld	r24, Z
 1a2:	91 81       	ldd	r25, Z+1	; 0x01
 1a4:	8c 32       	cpi	r24, 0x2C	; 44
 1a6:	91 40       	sbci	r25, 0x01	; 1
 1a8:	08 f0       	brcs	.+2      	; 0x1ac <main+0x11c>
 1aa:	93 cf       	rjmp	.-218    	; 0xd2 <main+0x42>
		{
			PORTB = 0x09;
 1ac:	55 b9       	out	0x05, r21	; 5
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	91 ee       	ldi	r25, 0xE1	; 225
 1b2:	64 e0       	ldi	r22, 0x04	; 4
 1b4:	81 50       	subi	r24, 0x01	; 1
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	60 40       	sbci	r22, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x124>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x12e>
 1be:	00 00       	nop
			_delay_ms(100);
			PORTB = 0x03;
 1c0:	45 b9       	out	0x05, r20	; 5
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	91 ee       	ldi	r25, 0xE1	; 225
 1c6:	64 e0       	ldi	r22, 0x04	; 4
 1c8:	81 50       	subi	r24, 0x01	; 1
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	60 40       	sbci	r22, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x138>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x142>
 1d2:	00 00       	nop
			_delay_ms(100);
			PORTB = 0x06;
 1d4:	35 b9       	out	0x05, r19	; 5
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	91 ee       	ldi	r25, 0xE1	; 225
 1da:	64 e0       	ldi	r22, 0x04	; 4
 1dc:	81 50       	subi	r24, 0x01	; 1
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	60 40       	sbci	r22, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x14c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x156>
 1e6:	00 00       	nop
			_delay_ms(100);
			PORTB = 0x0c;
 1e8:	25 b9       	out	0x05, r18	; 5
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	93 ed       	ldi	r25, 0xD3	; 211
 1ee:	60 e3       	ldi	r22, 0x30	; 48
 1f0:	81 50       	subi	r24, 0x01	; 1
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	60 40       	sbci	r22, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x160>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x16a>
 1fa:	00 00       	nop
			_delay_ms(1000);
			
			OCR1A = adc_value;
 1fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 200:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 204:	91 83       	std	Z+1, r25	; 0x01
 206:	80 83       	st	Z, r24
 208:	64 cf       	rjmp	.-312    	; 0xd2 <main+0x42>

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
