
DA4B Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000190  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000759  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069d  00000000  00000000  00000979  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ab  00000000  00000000  00001016  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c2  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  000016aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000016f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int adc_value;					// variable used to hold ADC value

int main(void)
{
	DDRB = 0xFF;						// Used to set all pins as output for B
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;						// Used to set all pins as output for D
  94:	8a b9       	out	0x0a, r24	; 10
	
	ADMUX = (1 << REFS1) | (1 << REFS0);	// Internal 1.1 voltage reference
  96:	80 ec       	ldi	r24, 0xC0	; 192
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b10100110;				    // ADC enabled, ADC auto trigger enabled
  9c:	86 ea       	ldi	r24, 0xA6	; 166
  9e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11) ;  // Used to clear OC1A on compare match fast PWM
  a2:	82 ea       	ldi	r24, 0xA2	; 162
  a4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS12) | (1 << CS10); // Used for setting a prescaler of 1024 and Fast PWM
  a8:	8d e1       	ldi	r24, 0x1D	; 29
  aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	ICR1 = 5000;					// ICR1 value set
  ae:	88 e8       	ldi	r24, 0x88	; 136
  b0:	93 e1       	ldi	r25, 0x13	; 19
  b2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  b6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	while(1)
	{										
		while((ADCSRA & (1 << ADIF)) == 0); // while conversion starts
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
		adc_value = ADC;			
  be:	a8 e7       	ldi	r26, 0x78	; 120
  c0:	b0 e0       	ldi	r27, 0x00	; 0
			_delay_ms(600);			// Give time for transition
		}
		
		else if(adc_value == 255)   // If pot value is at it's highest enter if statement
		{
			OCR1A = 535;			// Used to turn to 180
  c2:	c8 e8       	ldi	r28, 0x88	; 136
  c4:	d0 e0       	ldi	r29, 0x00	; 0
  c6:	27 e1       	ldi	r18, 0x17	; 23
  c8:	32 e0       	ldi	r19, 0x02	; 2

	ICR1 = 5000;					// ICR1 value set
	
	while(1)
	{										
		while((ADCSRA & (1 << ADIF)) == 0); // while conversion starts
  ca:	80 81       	ld	r24, Z
  cc:	84 ff       	sbrs	r24, 4
  ce:	fd cf       	rjmp	.-6      	; 0xca <main+0x3a>
		adc_value = ADC;			
  d0:	8d 91       	ld	r24, X+
  d2:	9c 91       	ld	r25, X
  d4:	11 97       	sbiw	r26, 0x01	; 1
  d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		if(adc_value == 0)          // If pot value is at it's lowest enter if statement
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	61 f4       	brne	.+24     	; 0xfa <main+0x6a>
		{
			OCR1A = 0;				// Used to turn to 0
  e2:	19 82       	std	Y+1, r1	; 0x01
  e4:	18 82       	st	Y, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	4f ef       	ldi	r20, 0xFF	; 255
  e8:	8b e4       	ldi	r24, 0x4B	; 75
  ea:	9d e1       	ldi	r25, 0x1D	; 29
  ec:	41 50       	subi	r20, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x5c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x66>
  f6:	00 00       	nop
  f8:	e8 cf       	rjmp	.-48     	; 0xca <main+0x3a>
			_delay_ms(600);			// Give time for transition
		}
		
		else if(adc_value == 255)   // If pot value is at it's highest enter if statement
  fa:	8f 3f       	cpi	r24, 0xFF	; 255
  fc:	91 05       	cpc	r25, r1
  fe:	29 f7       	brne	.-54     	; 0xca <main+0x3a>
		{
			OCR1A = 535;			// Used to turn to 180
 100:	39 83       	std	Y+1, r19	; 0x01
 102:	28 83       	st	Y, r18
 104:	4f ef       	ldi	r20, 0xFF	; 255
 106:	8b e4       	ldi	r24, 0x4B	; 75
 108:	9d e1       	ldi	r25, 0x1D	; 29
 10a:	41 50       	subi	r20, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x7a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x84>
 114:	00 00       	nop
 116:	d9 cf       	rjmp	.-78     	; 0xca <main+0x3a>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
