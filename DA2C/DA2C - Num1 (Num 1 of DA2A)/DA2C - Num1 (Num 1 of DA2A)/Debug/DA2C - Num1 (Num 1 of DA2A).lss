
DA2C - Num1 (Num 1 of DA2A).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  00000e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001070  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038d  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  00001421  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>

int main(void)
{
	int ocount = 0;                      // Declaring overflow counter
	DDRB |= (1 << DDB2);                 // LED 2 is the output
  80:	22 9a       	sbi	0x04, 2	; 4
	TCCR0A = 0;                          // Using Normal mode
  82:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 0x00;                        // Declaring Timer Register set to 0
  84:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (1 << CS02 | (1 << CS00)); // Used to set prescaler to 1024
  86:	85 b5       	in	r24, 0x25	; 37
  88:	85 60       	ori	r24, 0x05	; 5
  8a:	85 bd       	out	0x25, r24	; 37
#define F_CPU 16000000UL                 // Frequency of the board
#include <avr/io.h>

int main(void)
{
	int ocount = 0;                      // Declaring overflow counter
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
	while(1)                             // Infinite loop
	{
		while((TIFR0 & 0x01) == 1)       // While timer interrupt flag is equal to 1 loop
		{
			TCNT0 = 0x00;                // TCNT0 set to 0x00 and will count up to 254
			TIFR0 = 0x01;                // TIFR0 is 0x01 so TOV0 is set due to overflow occurrence
  90:	21 e0       	ldi	r18, 0x01	; 1
			
			if (ocount <= 18)            // If overflow counter < 18, keep LED OFF (40%)
			PORTB = (0 << DDB2);         // Turn OFF LED
			
			else if (ocount >= 27)       // If overflow counter is >= 27, LED ON (60%)
			PORTB = (1 << DDB2);         // Turn ON LED
  92:	34 e0       	ldi	r19, 0x04	; 4
  94:	11 c0       	rjmp	.+34     	; 0xb8 <main+0x38>
	
	while(1)                             // Infinite loop
	{
		while((TIFR0 & 0x01) == 1)       // While timer interrupt flag is equal to 1 loop
		{
			TCNT0 = 0x00;                // TCNT0 set to 0x00 and will count up to 254
  96:	16 bc       	out	0x26, r1	; 38
			TIFR0 = 0x01;                // TIFR0 is 0x01 so TOV0 is set due to overflow occurrence
  98:	25 bb       	out	0x15, r18	; 21
			ocount++;                    // Increment overflow counter
  9a:	01 96       	adiw	r24, 0x01	; 1
			
			if (ocount <= 18)            // If overflow counter < 18, keep LED OFF (40%)
  9c:	83 31       	cpi	r24, 0x13	; 19
  9e:	91 05       	cpc	r25, r1
  a0:	14 f4       	brge	.+4      	; 0xa6 <main+0x26>
			PORTB = (0 << DDB2);         // Turn OFF LED
  a2:	15 b8       	out	0x05, r1	; 5
  a4:	04 c0       	rjmp	.+8      	; 0xae <main+0x2e>
			
			else if (ocount >= 27)       // If overflow counter is >= 27, LED ON (60%)
  a6:	8b 31       	cpi	r24, 0x1B	; 27
  a8:	91 05       	cpc	r25, r1
  aa:	0c f0       	brlt	.+2      	; 0xae <main+0x2e>
			PORTB = (1 << DDB2);         // Turn ON LED
  ac:	35 b9       	out	0x05, r19	; 5
			
			if (ocount == 44)            // If overflow counter is equal to 44, reset overflow counter
  ae:	8c 32       	cpi	r24, 0x2C	; 44
  b0:	91 05       	cpc	r25, r1
  b2:	11 f4       	brne	.+4      	; 0xb8 <main+0x38>
			ocount = 0;                  // Overflow counter reset to 0 so operation will restart
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
	TCNT0 = 0x00;                        // Declaring Timer Register set to 0
	TCCR0B |= (1 << CS02 | (1 << CS00)); // Used to set prescaler to 1024
	
	while(1)                             // Infinite loop
	{
		while((TIFR0 & 0x01) == 1)       // While timer interrupt flag is equal to 1 loop
  b8:	a8 99       	sbic	0x15, 0	; 21
  ba:	ed cf       	rjmp	.-38     	; 0x96 <main+0x16>
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <main+0x38>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
