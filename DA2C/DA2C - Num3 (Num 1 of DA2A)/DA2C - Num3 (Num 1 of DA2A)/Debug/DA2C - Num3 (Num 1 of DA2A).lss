
DA2C - Num3 (Num 1 of DA2A).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000018e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a4  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025a  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000399  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001535  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/interrupt.h>                 // Library must include to use interrupt
int ocount = 0;                            // Declaring overflow counter

int main(void)
{
	DDRB |= (1 << DDB2);                   // LED 2 is the output
  90:	22 9a       	sbi	0x04, 2	; 4
	TCCR0A |= (1 << WGM01);                // Using CTC Mode
  92:	84 b5       	in	r24, 0x24	; 36
  94:	82 60       	ori	r24, 0x02	; 2
  96:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0x00;                          // Declaring Timer Register set to 0
  98:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0xFF;                          // Top timer value (255) to output compare register
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (1 << CS02 | (1 << CS00));   // Used to set prescaler to 1024
  9e:	85 b5       	in	r24, 0x25	; 37
  a0:	85 60       	ori	r24, 0x05	; 5
  a2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << OCIE0A);                // Compare match is enabled when OCIE0A is set
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	sei();
  aa:	78 94       	sei
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x1c>

000000ae <__vector_14>:
	}


}
ISR (TIMER0_COMPA_vect)		// Timer0 Compare match
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
	while((TIFR0 & 0x01) == 1)     // While timer interrupt flag is equal to 1 loop
	{
		TCNT0 = 0x00;              // TCNT0 set to 0x00 and will count up to 254
		TIFR0 = 0x01;              // TIFR0 is 0x01 so TOV0 is set due to overflow occurrence
  c0:	21 e0       	ldi	r18, 0x01	; 1
		
		if (ocount <= 18)          // If overflow counter < 18, keep LED OFF (40%)
		PORTB = (0 << DDB2);       // Turn OFF LED
		
		else if (ocount >= 27)     // If overflow counter is >= 27, LED ON (60%)
		PORTB = (1 << DDB2);       // Turn ON LED
  c2:	34 e0       	ldi	r19, 0x04	; 4


}
ISR (TIMER0_COMPA_vect)		// Timer0 Compare match
{
	while((TIFR0 & 0x01) == 1)     // While timer interrupt flag is equal to 1 loop
  c4:	1d c0       	rjmp	.+58     	; 0x100 <__vector_14+0x52>
	{
		TCNT0 = 0x00;              // TCNT0 set to 0x00 and will count up to 254
  c6:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 0x01;              // TIFR0 is 0x01 so TOV0 is set due to overflow occurrence
  c8:	25 bb       	out	0x15, r18	; 21
		ocount++;                  // Increment overflow counter
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		if (ocount <= 18)          // If overflow counter < 18, keep LED OFF (40%)
  dc:	83 31       	cpi	r24, 0x13	; 19
  de:	91 05       	cpc	r25, r1
  e0:	14 f4       	brge	.+4      	; 0xe6 <__vector_14+0x38>
		PORTB = (0 << DDB2);       // Turn OFF LED
  e2:	15 b8       	out	0x05, r1	; 5
  e4:	03 c0       	rjmp	.+6      	; 0xec <__vector_14+0x3e>
		
		else if (ocount >= 27)     // If overflow counter is >= 27, LED ON (60%)
  e6:	4b 97       	sbiw	r24, 0x1b	; 27
  e8:	0c f0       	brlt	.+2      	; 0xec <__vector_14+0x3e>
		PORTB = (1 << DDB2);       // Turn ON LED
  ea:	35 b9       	out	0x05, r19	; 5
		
		if (ocount == 44)          // If overflow counter is equal to 44, reset overflow counter
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f4:	8c 97       	sbiw	r24, 0x2c	; 44
  f6:	21 f4       	brne	.+8      	; 0x100 <__vector_14+0x52>
		ocount = 0;                // Overflow counter reset to 0 so operation will restart
  f8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>


}
ISR (TIMER0_COMPA_vect)		// Timer0 Compare match
{
	while((TIFR0 & 0x01) == 1)     // While timer interrupt flag is equal to 1 loop
 100:	a8 99       	sbic	0x15, 0	; 21
 102:	e1 cf       	rjmp	.-62     	; 0xc6 <__vector_14+0x18>
		PORTB = (1 << DDB2);       // Turn ON LED
		
		if (ocount == 44)          // If overflow counter is equal to 44, reset overflow counter
		ocount = 0;                // Overflow counter reset to 0 so operation will restart
	}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
