
DA2C - Num1 (Num 2 of DA2A).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000164  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000068e  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000609  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023e  00000000  00000000  00000e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000010cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038d  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000147d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int ocount = 0;                              // Counter initialization

int main(void)
{
	DDRB |= (1<<DDB2);                       // Output is set to PB2
  90:	22 9a       	sbi	0x04, 2	; 4
	TCCR0A = 0;                              // Using Normal mode
  92:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 0x00;                            // Declaring Timer Register set to 0
  94:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (1 << CS02 | (1 << CS00));     // Used to set prescaler to 1024
  96:	85 b5       	in	r24, 0x25	; 37
  98:	85 60       	ori	r24, 0x05	; 5
  9a:	85 bd       	out	0x25, r24	; 37
	
	while(1)						         // Infinite loop
	{
		while((TIFR0 & 0x01) == 1)           // While timer interrupt flag is equal to 1 loop
		{
			TCNT0 = 0x0A;                    // TCNT0 set to 0x0A and will count up to 255
  9c:	3a e0       	ldi	r19, 0x0A	; 10
			TIFR0 = 0x01;                    // TIFR0 is 0x01 so TOV0 is set due to overflow occurrence
  9e:	21 e0       	ldi	r18, 0x01	; 1
			ocount++;                        // Increment overflow counter
			
			if((PINC & 0x02) == 0x02)        // Reading from 1st pin
			{
				TCNT0 = 0xFF;                // Counter set to 0xFF, will lessen counter timing
  a0:	4f ef       	ldi	r20, 0xFF	; 255
  a2:	21 c0       	rjmp	.+66     	; 0xe6 <main+0x56>
	
	while(1)						         // Infinite loop
	{
		while((TIFR0 & 0x01) == 1)           // While timer interrupt flag is equal to 1 loop
		{
			TCNT0 = 0x0A;                    // TCNT0 set to 0x0A and will count up to 255
  a4:	36 bd       	out	0x26, r19	; 38
			TIFR0 = 0x01;                    // TIFR0 is 0x01 so TOV0 is set due to overflow occurrence
  a6:	25 bb       	out	0x15, r18	; 21
			ocount++;                        // Increment overflow counter
  a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			
			if((PINC & 0x02) == 0x02)        // Reading from 1st pin
  ba:	31 9b       	sbis	0x06, 1	; 6
  bc:	0d c0       	rjmp	.+26     	; 0xd8 <main+0x48>
			{
				TCNT0 = 0xFF;                // Counter set to 0xFF, will lessen counter timing
  be:	46 bd       	out	0x26, r20	; 38
				if (ocount < 35)             // Loop as long as counter value is less than calculation for time (1.25s)
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c8:	83 97       	sbiw	r24, 0x23	; 35
  ca:	6c f4       	brge	.+26     	; 0xe6 <main+0x56>
				{
					PORTB = 0xFF;            // LED ON while loop runs
  cc:	45 b9       	out	0x05, r20	; 5
					ocount = 0;              // Counter set back to 0
  ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <main+0x56>
				}
			}
			
			else if (ocount > 35)           // Loop as long as counter value is greater than calculation for time (1.25s)
  d8:	84 97       	sbiw	r24, 0x24	; 36
  da:	2c f0       	brlt	.+10     	; 0xe6 <main+0x56>
			{
				PORTB = 0x00;			    // LED OFF if nothing read from 1st pin
  dc:	15 b8       	out	0x05, r1	; 5
				ocount = 0;                 // Counter set back to 0
  de:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  e2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	TCNT0 = 0x00;                            // Declaring Timer Register set to 0
	TCCR0B |= (1 << CS02 | (1 << CS00));     // Used to set prescaler to 1024
	
	while(1)						         // Infinite loop
	{
		while((TIFR0 & 0x01) == 1)           // While timer interrupt flag is equal to 1 loop
  e6:	a8 99       	sbic	0x15, 0	; 21
  e8:	dd cf       	rjmp	.-70     	; 0xa4 <main+0x14>
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <main+0x56>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
