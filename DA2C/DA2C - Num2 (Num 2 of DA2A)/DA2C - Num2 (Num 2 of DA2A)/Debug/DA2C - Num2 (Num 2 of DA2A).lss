
DA2C - Num2 (Num 2 of DA2A).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000192  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a4  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000260  00000000  00000000  00000ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000399  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001541  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int ocount = 0;                              // Counter initialized

int main(void)
{
	DDRB |= (1<<DDB2);                       // Output is set to PB2
  90:	22 9a       	sbi	0x04, 2	; 4
	TCCR0A = 0;                              // Using Normal mode
  92:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 0x00;                            // Declaring Timer Register set to 0
  94:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (1 << CS02 | (1 << CS00));     // Used to set prescaler to 1024
  96:	85 b5       	in	r24, 0x25	; 37
  98:	85 60       	ori	r24, 0x05	; 5
  9a:	85 bd       	out	0x25, r24	; 37
	sei();									 // Set Global Interrupt Enable
  9c:	78 94       	sei
	TIMSK0 |= (1 <<TOIE0);                   // Setting a 1 to TIMSK0 which will enable overflow interrupt
  9e:	ee e6       	ldi	r30, 0x6E	; 110
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	80 83       	st	Z, r24
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <main+0x18>

000000aa <__vector_16>:
		// Infinite loop
	}

}
ISR (TIMER0_OVF_vect)                    // Timer0 overflow interrupt
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	while((TIFR0 & 0x02) == 2)           // While timer interrupt flag is equal to 2 loop
	{
		TCNT0 = 0x00;                    // TCNT0 set to 0x00 and will count up to 255
		TIFR0 = 0x02;                    // TIFR0 is 0x02 so TOV0 is set due to overflow occurrence
  bc:	22 e0       	ldi	r18, 0x02	; 2
		if((PINC & 0x02) == 0x02)        // Reading from 1st pin
		{
			TCNT0 = 0x00;                // TCNT set to count to 255 for counter
			if (ocount < 16)             // Loop as long as counter is less than calculated timer value
			{
				PORTB = 0xFF;            // LED ON while loop runs
  be:	3f ef       	ldi	r19, 0xFF	; 255
	}

}
ISR (TIMER0_OVF_vect)                    // Timer0 overflow interrupt
{
	while((TIFR0 & 0x02) == 2)           // While timer interrupt flag is equal to 2 loop
  c0:	21 c0       	rjmp	.+66     	; 0x104 <__vector_16+0x5a>
	{
		TCNT0 = 0x00;                    // TCNT0 set to 0x00 and will count up to 255
  c2:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 0x02;                    // TIFR0 is 0x02 so TOV0 is set due to overflow occurrence
  c4:	25 bb       	out	0x15, r18	; 21
		ocount++;                        // Increment overflow counter
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		if((PINC & 0x02) == 0x02)        // Reading from 1st pin
  d8:	31 9b       	sbis	0x06, 1	; 6
  da:	0d c0       	rjmp	.+26     	; 0xf6 <__vector_16+0x4c>
		{
			TCNT0 = 0x00;                // TCNT set to count to 255 for counter
  dc:	16 bc       	out	0x26, r1	; 38
			if (ocount < 16)             // Loop as long as counter is less than calculated timer value
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e6:	40 97       	sbiw	r24, 0x10	; 16
  e8:	6c f4       	brge	.+26     	; 0x104 <__vector_16+0x5a>
			{
				PORTB = 0xFF;            // LED ON while loop runs
  ea:	35 b9       	out	0x05, r19	; 5
				ocount = 0;				 // Resetting counter back to 0
  ec:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  f0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  f4:	07 c0       	rjmp	.+14     	; 0x104 <__vector_16+0x5a>
			}
		}
		
		else if (ocount > 16)            // If counter is greater than 16, LED needs to be OFF
  f6:	41 97       	sbiw	r24, 0x11	; 17
  f8:	2c f0       	brlt	.+10     	; 0x104 <__vector_16+0x5a>
		{
			PORTB = 0x00;			     // LED OFF if nothing read from 1st pin
  fa:	15 b8       	out	0x05, r1	; 5
			ocount = 0;                  // Counter set back to 0
  fc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 100:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}

}
ISR (TIMER0_OVF_vect)                    // Timer0 overflow interrupt
{
	while((TIFR0 & 0x02) == 2)           // While timer interrupt flag is equal to 2 loop
 104:	a9 99       	sbic	0x15, 1	; 21
 106:	dd cf       	rjmp	.-70     	; 0xc2 <__vector_16+0x18>
		{
			PORTB = 0x00;			     // LED OFF if nothing read from 1st pin
			ocount = 0;                  // Counter set back to 0
		}
	}
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	3f 91       	pop	r19
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
